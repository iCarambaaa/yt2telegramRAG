# yt2telegram/channels/example_channel.yml
# 
# EXAMPLE/TEMPLATE FILE - Automatically skipped during production runs
# Copy this file and customize it for your channel

# General Channel Information
name: "Example Channel"
channel_id: "UCsXVk37bltHxD1rDPwtNM8Q" # Replace with actual YouTube Channel ID
db_path: "yt2telegram/downloads/example_channel.db"
cookies_file: "COOKIES_FILE" # Path to cookies file for age-restricted content
max_videos_to_fetch: 1 # Number of latest videos to fetch per run
retry_attempts: 3
retry_delay_seconds: 15

# LLM Configuration for Summarization
llm_config:
  llm_api_key_env: "LLM_PROVIDER_API_KEY"
  llm_model_env: "MODEL" # Use MODEL from .env
  llm_model: "deepseek/deepseek-chat-v3-0324" # Fallback if MODEL not set
  llm_base_url_env: "BASE_URL"
  llm_base_url: "https://openrouter.ai/api/v1"
  llm_prompt_template_path: "yt2telegram/prompts/example_summary.md"
  
  # Creator context helps maintain the channel's unique voice and style
  # This replaces hardcoded channel-specific logic with configuration-driven approach
  creator_context: "Example Channel - Educational content creator with clear explanations and engaging presentation style"
  
  # Multi-Model Configuration (Optional - Enhanced Quality)
  # Enables three-stage pipeline: Primary → Secondary → Synthesis
  multi_model:
    enabled: true # Set to false for single-model processing
    primary_model: "deepseek/deepseek-chat-v3-0324" # Fast, cost-effective
    secondary_model: "anthropic/claude-3.5-haiku" # Different perspective
    synthesis_model: "mistralai/mistral-medium-3.1" # High-quality synthesis
    synthesis_prompt_template_path: "yt2telegram/prompts/synthesis_template.md"
    fallback_strategy: "best_summary" # Options: "best_summary" or "primary_summary"

# Telegram Bot Configuration
telegram_bots:
  - name: "Example Channel Bot"
    token_env: "TELEGRAM_BOT_TOKEN"
    chat_id_env: "TELEGRAM_CHAT_ID"

# Subtitle Language Preferences (in priority order)
# For each language: tries manual first, then auto-generated
# Example for Russian channel: ["ru", "en"] - prefers Russian, falls back to English
subtitles:
  - "en" # Primary language
  - "de" # Fallback language

# Configuration Notes:
# 
# 1. Required Environment Variables (.env):
#    - TELEGRAM_BOT_TOKEN
#    - TELEGRAM_CHAT_ID (or channel-specific like EXAMPLE_CHANNEL_CHAT_ID)
#    - LLM_PROVIDER_API_KEY
#    - MODEL (e.g., deepseek/deepseek-chat-v3-0324)
#    - BASE_URL (e.g., https://openrouter.ai/api/v1)
#
# 2. Multi-Model Benefits:
#    - Better quality through diverse AI perspectives
#    - ~2.5x token usage vs single-model
#    - Costs tracked automatically in database
#
# 3. Subtitle Priority Logic:
#    - For each language in order: manual → auto-generated
#    - Example: ["ru", "en"] tries: ru-manual → ru-auto → en-manual → en-auto
#
# 4. Quick Start:
#    - Copy this file: cp example_channel.yml my_channel.yml
#    - Update: name, channel_id, db_path, chat_id_env
#    - Create prompt: cp example_summary.md my_channel_summary.md
#    - Add to .env: MY_CHANNEL_CHAT_ID="your_chat_id"
